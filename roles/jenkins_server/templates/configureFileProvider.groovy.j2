//
// Configure Plugin - Config File Provider
//
// Configures the Config File Provider plugin.
//
// References:
// * https://github.com/jenkinsci/config-file-provider-plugin/blob/master/src/test/java/org/jenkinsci/plugins/configfiles/buildwrapper/ConfigFileBuildWrapperWorkflowTest.java


// These are the basic imports that Jenkin's interactive script console 
// automatically includes.
import jenkins.*;
import jenkins.model.*;
import hudson.*;
import hudson.model.*;

println("Configuring Config File Provider Plugin...")

// Grab the provider for Maven settings.xml files.
settingsFileProvider = org.jenkinsci.lib.configprovider.ConfigProvider
    .getByIdOrNull(org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig.class.getName())

// Grab the provider for Maven toolchains.xml files.
toolchainsFileProvider = org.jenkinsci.lib.configprovider.ConfigProvider
    .getByIdOrNull(org.jenkinsci.plugins.configfiles.maven.MavenToolchainsConfig.class.getName())


//
// Define Helper Functions
//

def createOrUpdateUsernamePasswordCredentials = { id, description, username, password ->
  domain = com.cloudbees.plugins.credentials.domains.Domain.global()
  credsStore = Jenkins.instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

  secrets = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
    com.cloudbees.plugins.credentials.common.UsernamePasswordCredentials.class,
    Jenkins.instance
  )

  matchingSecret = secrets.find { secret -> secret.id == id }
  newSecret = new com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl(
    com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
    id,
    description,
    username,
    password
  )

  if (matchingSecret != null && !matchingSecret.equals(newSecret)) {
    println "Secret found: ${matchingSecret.id}"
    updateResult = credsStore.updateCredentials(domain, matchingSecret, newSecret)
    if (updateResult) {
      println "Changed secret: ${id}"
    } else {
      println "Secret failed to update: ${id}"
    }
  } else if (matchingSecret == null) {
    println "Secret not found: ${id}"
    credsStore.addCredentials(domain, newSecret)
    println "Changed by creating secret: ${id}"
  }
}

def areCredentialsEqual = { credentials1, credentials2 ->
  if (credentials1 == null && credentials2 != null)
    return false
  if (credentials2 == null && credentials1 != null)
    return false
  if (credentials1.size != credentials2.size)
    return false

  for (int i = 0; i < credentials1.size; i++) {
    credentialFrom1 = credentials1[i]
    credentialFrom2 = credentials2[i]

    if (credentialFrom1 == null && credentialFrom2 != null)
      return false
    if (credentialFrom2 == null && credentialFrom1 != null)
      return false
    if (credentialFrom1.serverId != credentialFrom2.serverId
        || credentialFrom1.credentialsId != credentialFrom2.credentialsId)
      return false
  }

  return true
}

def createOrUpdateMavenSettings = { desiredSettings ->
  // Check for an existing settings file.
  existingSettings = settingsFileProvider.getConfigById(desiredSettings.id)

  // Create the settings file if it's missing.
  if (existingSettings == null) {
    println("Did not find settings file ${desiredSettings.id}. Creating...")
    settingsFileProvider.save(desiredSettings)
    existingSettings = desiredSettings
    println("Changed: created settings file: ${existingSettings.id}")
  }

  // Update the settings file if it's out of date.
  if (
      existingSettings.id != desiredSettings.id
      || existingSettings.name != desiredSettings.name
      || existingSettings.name != desiredSettings.name
      || existingSettings.comment != desiredSettings.comment
      || existingSettings.content != desiredSettings.content
      || existingSettings.isReplaceAll != desiredSettings.isReplaceAll
      || !areCredentialsEqual(existingSettings.serverCredentialMappings, desiredSettings.serverCredentialMappings)
   ) {
    println("Existing settings '${existingSettings.id}' are out of date. Replacing...")
    settingsFileProvider.remove(existingSettings.id)
    settingsFileProvider.save(desiredSettings)
    println("Changed: replaced settings file '${existingSettings.id}'.")
  }
}

def createOrUpdateMavenToolchains = { desiredToolchains ->
  // Check for an existing settings file.
  existingToolchains = toolchainsFileProvider.getConfigById(desiredToolchains.id)

  // Create the settings file if it's missing.
  if (existingToolchains == null) {
    println("Did not find toolchains file ${desiredToolchains.id}. Creating...")
    toolchainsFileProvider.save(desiredToolchains)
    existingToolchains = desiredToolchains
    println("Changed: created toolchains file: ${existingToolchains.id}")
  }

  // Update the toolchains file if it's out of date.
  if (
      existingToolchains.id != desiredToolchains.id
      || existingToolchains.name != desiredToolchains.name
      || existingToolchains.name != desiredToolchains.name
      || existingToolchains.comment != desiredToolchains.comment
      || existingToolchains.content != desiredToolchains.content
   ) {
    println("Existing settings '${existingToolchains.id}' are out of date. Replacing...")
    settingsFileProvider.remove(existingToolchains.id)
    settingsFileProvider.save(desiredToolchains)
    println("Changed: replaced settings file '${existingToolchains.id}'.")
  }
}


//
// Create/Update File Configurations
//

justdavisNexusCredentialsId = "nexus-justdavis-jenkins"
createOrUpdateUsernamePasswordCredentials(
  justdavisNexusCredentialsId,
  "Login for the justdavis.com Nexus server, which is needed to interact with the repos there.",
  'jenkins',
  '{{ vault_service_account_passwords.jenkins }}'
)

ossrhCredentialsId = "ossrh"
createOrUpdateUsernamePasswordCredentials(
  ossrhCredentialsId,
  "Login for OSSRH, which is used to land artifacts in Maven Central.",
  '{{ vault_jenkins_ossrh_username }}',
  '{{ vault_jenkins_ossrh_password }}'
)

createOrUpdateMavenSettings(
  new org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig(
    'justdavis:settings.xml',
    'The settings.xml for justdavis.com projects.',
    '',
    // Get the settings.xml file's contents into a Java variable with causing any
    // compile errors. (Note: If all you need is a "standard" settings.xml, you can
    // use the value of `settingsFileProvider.newConfig().content`, instead.
    new String(Base64.getDecoder().decode("{{ lookup('template', 'templates/mavenSettings.xml.j2') | b64encode }}"), java.nio.charset.StandardCharsets.UTF_8),
    true,
    [
      new org.jenkinsci.plugins.configfiles.maven.security.ServerCredentialMapping("justdavis.com-nexus", justdavisNexusCredentialsId),
      new org.jenkinsci.plugins.configfiles.maven.security.ServerCredentialMapping("justdavis.com-nexus-madrivercode-releases", justdavisNexusCredentialsId),
      new org.jenkinsci.plugins.configfiles.maven.security.ServerCredentialMapping("justdavis.com-nexus-madrivercode-snapshots", justdavisNexusCredentialsId),
      new org.jenkinsci.plugins.configfiles.maven.security.ServerCredentialMapping("ossrh", ossrhCredentialsId)
    ]
  )
)

createOrUpdateMavenToolchains(
  new org.jenkinsci.plugins.configfiles.maven.MavenToolchainsConfig(
    'justdavis:toolchains.xml',
    'The toolchains.xml for justdavis.com projects.',
    '',
    // Get the toolchains.xml file's contents into a Java variable with causing any
    // compile errors. (Note: If all you need is a "standard" settings.xml, you can
    // use the value of `toolchainsFileProvider.newConfig().content`, instead.
    new String(Base64.getDecoder().decode("{{ lookup('file', 'files/maven_toolchains.xml') | b64encode }}"), java.nio.charset.StandardCharsets.UTF_8)
  )
)
