---

# The Certbot installation will automatically add a cron job to renew certificates. Before that will work,
# though, we need to manually request the initial certificate -- as we do below.
- name: Install Certbot
  community.general.snap:
    name: certbot
    classic: true
  become: true

- name: Create Certbot Hook Scripts
  ansible.builtin.template:
    src: "certbot-hook-{{ item }}.sh"
    dest: "/usr/local/bin/certbot-hook-{{ item }}.sh"
    mode: 'u=rwx,g=rx,o=rx'
  become: true
  loop:
    - 'deploy'
    - 'dns-auth'
    - 'dns-cleanup'

- name: Create Script to Run Certbot
  ansible.builtin.copy:
    dest: "/usr/local/bin/certbot-certonly.sh"
    mode: 'u=rwx,g=rx,o=rx'
    content: |
      #!/bin/bash
      certbot certonly --manual \
        --preferred-challenges=dns \
        --email {{ domain_webmaster }} \
        --agree-tos \
        --no-eff-email \
        --manual-auth-hook /usr/local/bin/certbot-hook-dns-auth.sh \
        --manual-cleanup-hook /usr/local/bin/certbot-hook-dns-cleanup.sh \
        --deploy-hook /usr/local/bin/certbot-hook-deploy.sh \
        --non-interactive \
        {{ domains | map('regex_replace', '^(.*)$', '-d "\1"') | join(' ') }} \
        {{ domains | map('regex_replace', '^(.*)$', '-d "*.\1"') | join(' ') }} \
        {{ domain_extra_sans | map('regex_replace', '^(.*)$', '-d "*.\1"') | join(' ') }}
  become: true

- name: Request wildcard certificate with manual DNS
  ansible.builtin.command:
    cmd: /usr/local/bin/certbot-certonly.sh
    creates: "/etc/letsencrypt/live/{{ domains[0] }}/fullchain.pem"
  become: true
  register: certbot_cmd

- name: Show Certbot Output
  ansible.builtin.debug:
    var: certbot_cmd.stdout
