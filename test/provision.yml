---
# This playbook provisions AWS hosts that `site.yml` can be tested against.
#
# Usage:
#
#     $ ansible-playbook test-provision.yml
#
# Remember: AWS hosts cost money to run, so be sure to terminate them afterwards 
# with `test-teardown.yml`.

- hosts: localhost
  name: AWS - Provision Test Hosts
  connection: local
  gather_facts: false
  
  tasks:

    # Go boom if the test inventory is already present.
    - stat: path=./hosts-test
      register: stat_inventory
    - fail: msg='Test inventory already exists!'
      when: stat_inventory.stat.exists

    # Grab the current username, to log in EC2.
    - name: Local - whoami
      local_action: command whoami
      register: whoami
    
    - name: EC2 - Provision Security Group 'ssh-all'
      ec2_group:
        name: ssh-all
        description: Allows incoming traffic on port 22 (from all IPs).
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    
    # This would normally be a bad idea. But in this case, we want to mimic the 
    # setup of the production systems, which don't have a separate firewall.
    - name: EC2 - Provision Security Group 'all'
      ec2_group:
        name: all
        description: Allows all incoming traffic (from all IPs).
        region: "{{ aws_region }}"
        rules:
          - proto: all
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    
    - name: EC2 - Provision 'eddings'
      ec2_instance:
        key_name: "{{ aws_ec2_key_name }}"
        # The `t2.small` instance type has 1 vCPUs, 2GB RAM, and 12 CPU credits/hour.
        # For eddings, `t2.small` seems to be the minimum workable number of CPU credits. However,
        # the various services need more RAM and CPU resources for testing.
        instance_type: t2.large
        image_id: "{{ ami_id_ubuntu_24_04 }}"
        # Override default Ubuntu AMI root volume size (8 GB) to provide sufficient disk space
        # for PostgreSQL databases, Docker images, and application data during testing
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: 30
              volume_type: gp3
              delete_on_termination: true
        user_data: |
                   #!/bin/sh
                   # Seed the new VM with entropy. It's probably not great quality entropy, but
                   # still better than nothing.
                   # (Seems to be particularly needed on the smaller EC2 instance types. Without
                   # this, Kerberos domain creation takes FOREVER.)
                   sudo apt-get update -qq && sudo apt-get install -y -qq haveged

                   # Configure system locale to match production environment (en_US.UTF-8)
                   # This ensures PostgreSQL uses the same collation as production, preventing
                   # database creation failures due to collation mismatches
                   sudo locale-gen en_US.UTF-8
                   sudo update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8
        region: "{{ aws_region }}"
        network:
          vpc_subnet_id: "{{ aws_vpc_subnet }}"
          assign_public_ip: true
        security_groups:
          - default
          - all
        state: started
        wait: true
        exact_count: 1
        filters:
          instance-state-name: running
          'tag:Name': eddings
        tags:
          Name: eddings
          CreatedBy: "{{ whoami.stdout }}"
      register: ec2_eddings
    
    - name: EC2 - Provision 'jordan-u'
      ec2_instance:
        key_name: "{{ aws_ec2_key_name }}"
        # The `t2.micro` instance type has 1 vCPUs, 1GB RAM, and 6 CPU credits/hour.
        instance_type: t2.micro
        image_id: "{{ ami_id_ubuntu_24_04 }}"
        user_data: |
                   #!/bin/sh
                   # Seed the new VM with entropy. It's probably not great quality entropy, but
                   # still better than nothing.
                   # (Seems to be particularly needed on the smaller EC2 instance types. Without
                   # this, Kerberos domain creation takes FOREVER.)
                   # Also: run `apt-get upgrade`, to grab the latest SSL root certs, which are
                   # needed.
                   sudo apt-get update -qq && sudo apt-get install -y -qq haveged && sudo apt-get upgrade -y
        region: "{{ aws_region }}"
        network:
          vpc_subnet_id: "{{ aws_vpc_subnet }}"
          assign_public_ip: true
        security_groups:
          - default
          - ssh-all
        state: started
        wait: true
        exact_count: 1
        filters:
          instance-state-name: running
          'tag:Name': jordan-u
        tags:
          Name: jordan-u
          CreatedBy: "{{ whoami.stdout }}"
      register: ec2_jordan_u

    - name: Delegate test subdomains to temporary BIND server
      amazon.aws.route53:
        command: create
        zone: "{{ item.zone }}"
        record: "{{ item.record }}"
        type: "{{ item.type }}"
        ttl: 60
        # Disabled overwrite, though it's sometimes needed if things have gone sideways.
        # overwrite: true
        value: "{{ item.value }}"
      register: route53_records
      async: 600
      poll: 0
      loop:
        - zone: 'tests.justdavis.com'
          record: "{{ domain_test_prefix }}justdavis.com"
          type: 'NS'
          value: "ns1.{{ domain_test_prefix }}justdavis.com"
        - zone: 'tests.justdavis.com'
          record: "ns1.{{ domain_test_prefix }}justdavis.com"
          type: 'A'
          value: "{{ ec2_eddings.instances[0].public_ip_address }}"
        - zone: 'tests.davisonlinehome.name'
          record: "{{ domain_test_prefix }}davisonlinehome.name"
          type: 'NS'
          value: "ns1.{{ domain_test_prefix }}davisonlinehome.name"
        - zone: 'tests.davisonlinehome.name'
          record: "ns1.{{ domain_test_prefix }}davisonlinehome.name"
          type: 'A'
          value: "{{ ec2_eddings.instances[0].public_ip_address }}"
        - zone: 'tests.rpstourney.com'
          record: "{{ domain_test_prefix }}rpstourney.com"
          type: 'NS'
          value: "ns1.{{ domain_test_prefix }}rpstourney.com"
        - zone: 'tests.rpstourney.com'
          record: "ns1.{{ domain_test_prefix }}rpstourney.com"
          type: 'A'
          value: "{{ ec2_eddings.instances[0].public_ip_address }}"
        - zone: 'tests.storywyrm.com'
          record: "{{ domain_test_prefix }}storywyrm.com"
          type: 'NS'
          value: "ns1.{{ domain_test_prefix }}storywyrm.com"
        - zone: 'tests.storywyrm.com'
          record: "ns1.{{ domain_test_prefix }}storywyrm.com"
          type: 'A'
          value: "{{ ec2_eddings.instances[0].public_ip_address }}"

    - name: Wait for Route53 Records
      async_status:
        jid: "{{ item.ansible_job_id }}"
      with_items: "{{ route53_records.results }}"
      register: route53_records_status
      until: route53_records_status.finished
      delay: 10
      retries: 60
 
    - name: EC2 - Wait for SSH
      wait_for: host={{ item.public_dns_name }} search_regex=OpenSSH port=22 state=started
      with_items: "{{ ec2_eddings.instances + ec2_jordan_u.instances }}"

    - name: Write Test Inventory
      template:
        src: hosts-test
        dest: ./hosts-test

