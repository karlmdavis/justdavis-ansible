//
// Configure Plugin - Config File Provider
//
// Configures the Config File Provider plugin.
//
// References:
// * https://github.com/jenkinsci/config-file-provider-plugin/blob/master/src/test/java/org/jenkinsci/plugins/configfiles/buildwrapper/ConfigFileBuildWrapperWorkflowTest.java


// These are the basic imports that Jenkin's interactive script console 
// automatically includes.
import jenkins.*;
import jenkins.model.*;
import hudson.*;
import hudson.model.*;

println("Configuring Config File Provider Plugin...")

def createOrUpdateUsernamePasswordCredentials = { id, description, username, password ->
	domain = com.cloudbees.plugins.credentials.domains.Domain.global()
	credsStore = Jenkins.instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()
	
	secrets = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
		com.cloudbees.plugins.credentials.common.UsernamePasswordCredentials.class,
		Jenkins.instance
	)
	
	matchingSecret = secrets.find { secret -> secret.id == id }
	newSecret = new com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl(
		com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
		id,
		description,
		username,
		password
	)
	
	if (matchingSecret != null && !matchingSecret.equals(newSecret)) {
		println "Secret found: ${matchingSecret.id}"
		updateResult = credsStore.updateCredentials(domain, matchingSecret, newSecret)
		if (updateResult) {
			println "Changed secret: ${id}"
		} else {
			println "Secret failed to update: ${id}"
		}
	} else if (matchingSecret == null) {
		println "Secret not found: ${id}"
		credsStore.addCredentials(domain, newSecret)
		println "Changed by creating secret: ${id}"
	}
}

// Verify that Jenkins' credentials store has the required logins.
//credentialsId = "TODO"
//createOrUpdateUsernamePasswordCredentials(
//	credentialsId, 
//	"Login for TODO, which can be used to TODO.", 
//	'TODO_CURLY_BRACKETS vault_jenkins_TODO_username }}',
//	'TODO_CURLY_BRACKETS vault_jenkins_TODO_password }}'
//)

// Grab the provider for Maven settings.xml files.
settingsFileProvider = org.jenkinsci.lib.configprovider.ConfigProvider
	.getByIdOrNull(org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig.class.getName())


// Create a new, correct config file object, for use below.
settingsConfigId = settingsFileProvider.getProviderId() + ":justdavis-settings-xml"
settingsConfigName = "The settings.xml for justdavis.com projects"
settingsConfigComment = ""
settingsConfigTemplate = settingsFileProvider.newConfig()
settingsConfigReplaceAll = true
settingsConfigCredentials = [] //[new org.jenkinsci.plugins.configfiles.maven.security.ServerCredentialMapping("TODO", credentialsId)]
settingsConfigNew = new org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig(
	settingsConfigId,
	settingsConfigName,
	settingsConfigComment,
	settingsConfigTemplate.content,
	settingsConfigReplaceAll,
	settingsConfigCredentials
)

// Check for an existing config file.
settingsConfig = settingsFileProvider.getConfigById(settingsConfigId)

// Update or create the config file.
if(settingsConfig != null && !settingsConfig.equals(settingsConfigNew)) {
	println("Found config file ${settingsConfigId}. Replacing...")
	settingsFileProvider.remove(settingsConfigId)
	settingsFileProvider.save(settingsConfigNew)
	println("Changed config file: ${settingsConfigId}")
} else if (settingsConfig == null) {
	println("Did not find config file ${settingsConfigId}. Creating...")
	settingsFileProvider.save(settingsConfigNew)
	println("Changed by creating config file: ${settingsConfigId}")
}
