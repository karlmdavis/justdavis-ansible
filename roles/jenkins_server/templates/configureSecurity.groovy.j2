//
// Configure Jenkins Security: Authentication and Authorization
// 
// This script was built from the following references:
// * <https://github.com/Accenture/adop-jenkins/blob/master/resources/init.groovy.d/adop_ldap.groovy>
// * <https://github.com/jenkinsci/ldap-plugin/blob/master/src/main/java/hudson/security/LDAPSecurityRealm.java>
// * <https://github.com/jenkinsci/ldap-plugin/blob/master/src/main/java/jenkins/security/plugins/ldap/LDAPConfiguration.java>
//

// These are the basic imports that Jenkin's interactive script console 
// automatically includes.
import jenkins.*;
import jenkins.model.*;
import hudson.*;
import hudson.model.*;

// These are the imports required for this specific script.
import hudson.security.SecurityRealm
import hudson.security.LDAPSecurityRealm.CacheConfiguration
import hudson.security.LDAPSecurityRealm
import jenkins.security.plugins.ldap.LDAPConfiguration
import jenkins.security.plugins.ldap.FromGroupSearchLDAPGroupMembershipStrategy
import hudson.security.AuthorizationStrategy
import hudson.security.FullControlOnceLoggedInAuthorizationStrategy


//
// Configure Jenkins' Authentication
//
println "Configuring authentication..."

String ldapServerUri = 'ldaps://{{ domain }}'
String ldapRootDn = 'dc=justdavis,dc=com'
boolean ldapInhibitInferRootDn = true
String ldapManagerDn = null
String ldapManagerPassword = null
String ldapUserSearchBase = '' // Need to include `ou=people` and `ou=services`
String ldapUserSearchFilter = '(| (& (objectClass=inetOrgPerson) (uid={0}) ) (& (objectClass=simpleSecurityObject) (cn={0}) ) )'
String ldapGroupSearchBase = 'ou=groups'

LDAPConfiguration ldapConfiguration = new LDAPConfiguration(
  ldapServerUri,
  ldapRootDn,
  ldapInhibitInferRootDn,
  ldapManagerDn,
  ldapManagerPassword
)
ldapConfiguration.setUserSearchBase(ldapUserSearchBase)
ldapConfiguration.setUserSearch(ldapUserSearchFilter)
ldapConfiguration.setGroupSearchBase(ldapGroupSearchBase)

boolean ldapDisableMailAddressResolver = false
CacheConfiguration ldapCacheConfiguration = new CacheConfiguration(
  1000, // num cached items
  300 // seconds to cache
)
IdStrategy ldapUserIdStrategy = IdStrategy.CASE_INSENSITIVE
IdStrategy ldapGroupIdStrategy = IdStrategy.CASE_INSENSITIVE
hudson.security.LDAPSecurityRealm securityRealm = new LDAPSecurityRealm(
  java.util.Collections.singletonList(ldapConfiguration),
  ldapDisableMailAddressResolver,
  ldapCacheConfiguration,
  ldapUserIdStrategy,
  ldapGroupIdStrategy
)

// Define some helper functions to check equality of LDAP objects.
def areLdapGroupMembershipStrategiesEqual = { strategy1, strategy2 ->
  if (strategy1 == null && strategy2 != null) return false
  if (strategy2 == null && strategy1 != null) return false
  if (strategy1.getClass() != strategy2.getClass()) return false

  if (strategy1 instanceof jenkins.security.plugins.ldap.FromGroupSearchLDAPGroupMembershipStrategy) {
    if (strategy1.filter != strategy2.filter) return false
  } else if (strategy1 instanceof jenkins.security.plugins.ldap.FromUserRecordLDAPGroupMembershipStrategy) {
    if (strategy1.attributeName != strategy2.attributeName) return false
  } else {
    throw new IllegalArgumentException("Unexpected strategy: '${strategy1}'.")
  }

  return true
}

def areLdapConfigurationsEqual = { config1, config2 ->
  if (config1 == null && config2 != null) return false
  if (config2 == null && config1 != null) return false
  if (config1.server != config2.server) return false
  if (config1.rootDN != config2.rootDN) return false
  if (config1.inhibitInferRootDN != config2.inhibitInferRootDN) return false
  if (config1.userSearchBase != config2.userSearchBase) return false
  if (config1.userSearch != config2.userSearch) return false
  if (config1.groupSearchBase != config2.groupSearchBase) return false
  if (config1.groupSearchFilter != config2.groupSearchFilter) return false
  if (!areLdapGroupMembershipStrategiesEqual(config1.groupMembershipStrategy, config2.groupMembershipStrategy)) return false
  if (config1.managerDN != config2.managerDN) return false
  if (config1.managerPassword != config2.managerPassword) return false
  if (config1.displayNameAttributeName != config2.displayNameAttributeName) return false
  if (config1.mailAddressAttributeName != config2.mailAddressAttributeName) return false
  if (config1.extraEnvVars != config2.extraEnvVars) return false
  return true
}

def areLdapConfigurationListsEqual = { configs1, configs2 ->
  if (configs1 == null && configs2 != null) return false
  if (configs2 == null && configs1 != null) return false
  if (configs1.size() != configs2.size()) return false
  for (int i=0; i < configs1.size(); i++) {
    if (!areLdapConfigurationsEqual(configs1[i], configs2[i])) return false
  }
  return true
}

def areCacheConfigurationsEqual = { cache1, cache2 ->
  if (cache1 == null && cache2 != null) return false
  if (cache2 == null && cache1 != null) return false
  if (cache1.size != cache2.size) return false
  if (cache1.ttl != cache2.ttl) return false
  return true
}

def areSecurityRealmsEqual = { realm1, realm2 ->
  if (realm1 == null && realm2 != null) return false
  if (realm2 == null && realm1 != null) return false
  if (realm1.getClass() != realm2.getClass()) return false
  if (!areLdapConfigurationListsEqual(realm1.configurations, realm2.configurations)) return false
  if (realm1.disableMailAddressResolver != realm2.disableMailAddressResolver) return false
  if (realm1.disableRolePrefixing != realm2.disableRolePrefixing) return false
  if (realm1.userIdStrategy != realm2.userIdStrategy) return false
  if (realm1.groupIdStrategy != realm2.groupIdStrategy) return false
  if (!areCacheConfigurationsEqual(realm1.cache, realm2.cache)) return false
  return true
}

// Check for equality, no need to modify the runtime if no settings changed
if (!areSecurityRealmsEqual(securityRealm, Jenkins.instance.getSecurityRealm())) {
  Jenkins.instance.setSecurityRealm(securityRealm)
  Jenkins.instance.save()
  println "Changed security realm."
}

println "Configured authentication."


//
// Configure Jenkins' Authorization
//
println "Configuring authorization..."

// TODO Eventually, probably should switch to one of the matrix strategies, to
// allow anon read of at least some projects. Unfortunately, the API for those
// looks terrible and I'd rather go with something simple that works for now.

FullControlOnceLoggedInAuthorizationStrategy authorizationStrategy = new FullControlOnceLoggedInAuthorizationStrategy()
authorizationStrategy.setAllowAnonymousRead(false)

// Define some helper functions to check equality of LDAP objects.
def areAuthorizationStrategiesEqual = { strategy1, strategy2 ->
  if (strategy1 == null && strategy2 != null) return false
  if (strategy2 == null && strategy1 != null) return false
  if (strategy1.getClass() != strategy2.getClass()) return false

  if (strategy1 instanceof FullControlOnceLoggedInAuthorizationStrategy) {
    if (strategy1.denyAnonymousReadAccess != strategy2.denyAnonymousReadAccess) return false
  } else {
    throw new IllegalArgumentException("Unexpected strategy: '${strategy1}'.")
  }

  return true
}

// Check for equality, no need to modify the runtime if no settings changed
if(!areAuthorizationStrategiesEqual(authorizationStrategy, Jenkins.instance.getAuthorizationStrategy())) {
  Jenkins.instance.setAuthorizationStrategy(authorizationStrategy)
  Jenkins.instance.save()
  println "Changed authorization strategy."
}

println "Configured authorization."
