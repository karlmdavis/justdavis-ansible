---

- name: Configure Hosts Entry for Eddings
  lineinfile:
    dest: /etc/hosts
    regexp: "^{{ hostvars['eddings.justdavis.com']['public_ip_address'] }} .*$"
    line: "{{ hostvars['eddings.justdavis.com']['public_ip_address'] }} eddings.{{ domain }}"
  become: true
  # This is only needed in AWS, as it allows us to fake a working reverse DNS entry for eddings.
  when: is_test == true

# This MUST NOT be done in production, but is required for the tests to work.
- name: Trust Let's Encrypt Staging CA
  get_url:
    url: 'https://letsencrypt.org/certs/fakelerootx1.pem'
    dest: '/usr/local/share/ca-certificates/fakelerootx1.crt'
    owner: root
    group: staff
    mode: u=rw,g=r,o=r
  register: download_staging_ca_result
  become: true
  when: is_test == true

- name: Update CA Certificates Index
  command: /usr/sbin/update-ca-certificates
  when: download_staging_ca_result.changed
  become: true

- name: Configure LDAP Clients
  lineinfile:
    dest: /etc/ldap/ldap.conf
    insertafter: '^#URI'
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^BASE', line: "BASE\tdc=justdavis,dc=com" }
    - { regexp: '^URI', line: "URI\tldaps://{{ domain }}" }
    - { regexp: '^TLS_CACERT', line: "TLS_CACERT\t/etc/ssl/certs/ca-certificates.crt" }
  become: true

# Older Ubuntu releases should use auth-client-config to manage LDAP and Kerberos logins.
- import_tasks: config_auth_client_config.yml
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version in ['16.04', '18.04']

# Newer Ubuntu releases should use SSSD to manage LDAP and Kerberos logins.
- import_tasks: config_sssd.yml
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version not in ['16.04', '18.04']

- name: Enable Kerberos/GSSAPI SSH Server Logins
  lineinfile:
    dest: /etc/ssh/sshd_config
    insertafter: '^#GSSAPIAuthentication '
    regexp: '^GSSAPIAuthentication '
    line: 'GSSAPIAuthentication yes'
  become: true

- name: Disable Password-Based SSH Server Logins
  lineinfile:
    dest: /etc/ssh/sshd_config
    insertafter: '^#PasswordAuthentication '
    regexp: '^PasswordAuthentication '
    line: 'PasswordAuthentication no'
  become: true

- name: Enable Kerberos/GSSAPI SSH Client Logins
  blockinfile:
    path: /etc/ssh/ssh_config
    block: |
      Host *.{{ domain }}
          PreferredAuthentications gssapi-with-mic,publickey,password
          GSSAPIAuthentication yes
          GSSAPIDelegateCredentials no
  become: true

- name: Grant karl NOPASSWD Access to sudo
  copy:
    dest: /etc/sudoers.d/karl
    content: |
      # Allow the `karl` account sudo access without requiring a password.
      karl ALL=(ALL) NOPASSWD:ALL
    owner: root
    group: root
    mode: u=r,g=r,o=
    validate: /usr/sbin/visudo --check --file=%s
  become: true
