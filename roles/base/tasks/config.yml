---

- name: Install SSH Security Modules
  apt: name={{ item }} update_cache=true cache_valid_time="{{ 60 * 15 }}"
  with_items:
    - fail2ban
  become: true

- name: Firewall - Allow SSH incoming traffic
  ufw:
    rule: allow
    name: OpenSSH
  become: true
  when: "'Microsoft' not in ansible_kernel"

- name: Firewall - Enable
  ufw:
    state: enabled
  become: true
  when: "'Microsoft' not in ansible_kernel"

- name: Configure Timezone
  template:
    src: templates/timezone.j2
    dest: /etc/timezone
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  become: true
  register: timezone_file
  when: "'Microsoft' not in ansible_kernel"

- name: Apply Timezone Change
  command: /usr/sbin/dpkg-reconfigure --frontend noninteractive tzdata
  become: true
  when: "timezone_file.changed and 'Microsoft' not in ansible_kernel"

- name: Install 'ntp' and Other Base Packages
  apt: name={{ item }} update_cache=true cache_valid_time="{{ 60 * 15 }}"
  with_items:
    - ntp
  become: true
  when: "'Microsoft' not in ansible_kernel"

- name: Configure 'hosts'
  lineinfile:
    dest: /etc/hosts
    regexp: '^127.0.1.1'
    line: "127.0.1.1 {{ inventory_hostname_short }}.{{ domain }} {{ inventory_hostname_short }}"
  become: true

- name: Configure 'hostname' (permanent)
  copy:
    dest: /etc/hostname
    content: "{{ inventory_hostname_short }}"
  register: hostname_file
  become: true
  when: "'Microsoft' not in ansible_kernel"

- name: Configure 'hostname' (transient)
  command: "/usr/bin/hostnamectl set-hostname {{ inventory_hostname_short }}"
  become: true
  when: "hostname_file.changed and 'Microsoft' not in ansible_kernel"

- name: Auto Upgrade - Install
  apt: name={{ item }} update_cache=true cache_valid_time="{{ 60 * 15 }}"
  with_items:
    - unattended-upgrades
  become: true

- name: Auto Upgrade - Configure
  template:
    src: "{{ item.src }}"
    dest: "/etc/apt/apt.conf.d/{{ item.dest }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_items:
    - { src: '50unattended-upgrades.j2', dest: '50unattended-upgrades' }
    - { src: '20auto-upgrades.j2', dest: '20auto-upgrades' }
  become: true

- name: Install Expect Utility
  apt: name={{ item }} update_cache=true cache_valid_time="{{ 60 * 15 }}"
  with_items:
    # These two packages are used by several other server & client roles.
    # Note: The Ansible expect module can't be used on all clients, due to https://github.com/ansible/ansible/issues/23851.
    - expect
    - python-pexpect
  become: true

# Ansible's `become_user` feature requires the `setfacl` command.
- name: Install ACL Utilities
  package:
    name: acl
    state: present
  become: true
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_version == '14.04'

- name: Install Standard Tools
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - git
    - vim
    - build-essential
  become: true

- name: Add GitHub to the Global ssh_known_hosts
  known_hosts:
    path: /etc/ssh/ssh_known_hosts
    name: github.com
    key: "{{ ssh_known_host_github }}"
  become: true

# Bizarrely, this is required prior to Ubuntu 17.02, per <https://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1618188>.
- name: Create systemd-journal Storage Directory
  file:
    path: /var/log/journal
    state: directory
    owner: root
    group: systemd-journal
  become: true
  when:
    - ansible_distribution == 'Ubuntu'
  register: mkdir_var_log_journal

- name: Configure systemd-journal Storage Directory
  command: /bin/systemd-tmpfiles --create --prefix /var/log/journal
  become: true
  when: mkdir_var_log_journal.changed

- name: Apply systemd-journal Storage Configuration
  command: /usr/bin/killall -USR1 systemd-journald
  become: true
  when: mkdir_var_log_journal.changed
