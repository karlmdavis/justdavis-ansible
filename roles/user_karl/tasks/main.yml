---

- name: Create User Home Directory
  ansible.builtin.command:
    cmd: /sbin/mkhomedir_helper {{ user_karl_target_user }}
  args:
    creates: "/home/{{ user_karl_target_user }}"
  become: true

- name: Create User .ssh Directory
  ansible.builtin.file:
    state: directory
    dest: "/home/{{ user_karl_target_user }}/.ssh"
    mode: u=rwx,g=,o=
    owner: "{{ user_karl_target_user }}"
    group: "{{ user_karl_target_user }}"
  become: true

- name: Authorize User for NOPASSWD sudo Use
  ansible.builtin.copy:
    dest: '/etc/sudoers.d/{{ user_karl_target_user }}'
    content: |
      # Allow the `{{ user_karl_target_user }}` account sudo access
      # without requiring a password.
      {{ user_karl_target_user }} ALL=(ALL) NOPASSWD:ALL
    owner: root
    group: root
    mode: u=w,g=r,o=
    validate: '/usr/sbin/visudo --check --file=%s'
  become: true

- name: Add User to sudo Group
  # This seems redundant with the above sudoers.d entry,
  # but is needed by polkit.
  ansible.builtin.user:
    name: "{{ user_karl_target_user }}"
    groups: sudo
    append: true
  become: true

- name: Authorize SSH Keys
  ansible.posix.authorized_key:
    user: "{{ user_karl_target_user }}"
    key: "{{ item }}"
  become: true
  loop: "{{ user_karl_ssh_keys }}"
  when: user_karl_ssh_keys | length > 0

# Did you know Homebrew is a perfectly cromulent option for dev tools on Linux?
# Me either, but it is!
- name: Install Homebrew
  ansible.builtin.shell:
    cmd: >
      /bin/bash -c "$(curl -fsSL
      https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    creates: /home/linuxbrew/.linuxbrew/bin/brew
  environment:
    NONINTERACTIVE: "1"
  become_user: "{{ user_karl_target_user }}"
  become: true

- name: Define Homebrew Path for Later Tasks
  ansible.builtin.set_fact:
    brew_prefix: /home/linuxbrew/.linuxbrew

- name: Configure Homebrew in Bash Profile
  ansible.builtin.copy:
    dest: /etc/profile.d/homebrew.sh
    content: |
      ##
      # This script configures Homebrew for all users on the system.
      #
      # Note: For login shells, Bash will source `/etc/profile`, which in turn sources all scripts in
      # `/etc/profile.d/`, including this one.
      ##

      # Homebrew shellenv setup for all users
      if [ -x {{ brew_prefix }}/bin/brew ]; then
        eval "$({{ brew_prefix }}/bin/brew shellenv)"
      fi
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  become: true

- name: Install chezmoi Using Homebrew
  community.general.homebrew:
    name: chezmoi
    state: present
  become_user: "{{ user_karl_target_user }}"
  become: true

- name: Initialize chezmoi with dotfiles repo
  ansible.builtin.shell:
    cmd: >
      set -o pipefail; echo "personal" |
      chezmoi init --no-tty karlmdavis
    executable: /bin/bash
    creates: "/home/{{ user_karl_target_user }}/.local/share/chezmoi"
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ brew_prefix }}/bin:{{ brew_prefix }}/sbin"
    HOMEBREW_PREFIX: "{{ brew_prefix }}"
    HOMEBREW_CELLAR: "{{ brew_prefix }}/Cellar"
    HOMEBREW_REPOSITORY: "{{ brew_prefix }}"
  become_user: "{{ user_karl_target_user }}"
  become: true

- name: Apply chezmoi dotfiles
  ansible.builtin.command:
    cmd: chezmoi apply
    # Just checking for an arbitrary file that should exist if chezmoi has been applied.
    creates: "/home/{{ user_karl_target_user }}/.config/zellij/config.kdl"
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ brew_prefix }}/bin:{{ brew_prefix }}/sbin"
    HOMEBREW_PREFIX: "{{ brew_prefix }}"
    HOMEBREW_CELLAR: "{{ brew_prefix }}/Cellar"
    HOMEBREW_REPOSITORY: "{{ brew_prefix }}"
  become_user: "{{ user_karl_target_user }}"
  become: true
