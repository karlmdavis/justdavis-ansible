---
# This playbook provisions AWS hosts that `site.yml` can be tested against.
#
# Usage:
#
#     $ ansible-playbook test-provision.yml
#
# Remember: AWS hosts cost money to run, so be sure to terminate them afterwards 
# with `test-teardown.yml`.

- hosts: localhost
  name: AWS - Provision Test Hosts
  connection: local
  gather_facts: false
  
  tasks:

    # Go boom if the test inventory is already present.
    - stat: path=./hosts-test
      register: stat_inventory
    - fail: msg='Test inventory already exists!'
      when: stat_inventory.stat.exists

    # Grab the current username, to log in EC2.
    - name: Local - whoami
      local_action: command whoami
      register: whoami
    
    - name: EC2 - Provision Security Group 'ssh-all'
      ec2_group:
        name: ssh-all
        description: Allows incoming traffic on port 22 (from all IPs).
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    
    # This would normally be a bad idea. But in this case, we want to mimic the 
    # setup of the production systems, which don't have a separate firewall.
    - name: EC2 - Provision Security Group 'all'
      ec2_group:
        name: all
        description: Allows all incoming traffic (from all IPs).
        region: "{{ aws_region }}"
        rules:
          - proto: all
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    
    - name: EC2 - Provision 'eddings'
      ec2:
        key_name: "{{ aws_ec2_key_name }}"
        group:
          - default
          - all
        # The `t2.small` instance type has 1 vCPUs, 2GB RAM, and 12 CPU credits/hour.
        # For eddings, `t2.small` seems to be the minimum workable number of CPU credits. However, Sonatype Nexus needs at least 3GB RAM, then Jenkins and Nexus need a decent chunk more.
        instance_type: t2.large
        image: "{{ ami_id_ubuntu_20_04 }}"
        user_data: |
                   #!/bin/sh
                   # Seed the new VM with entropy. It's probably not great quality entropy, but still better than nothing.
                   # (Seems to be particularly needed on the smaller EC2 instance types. Without this, Kerberos domain creation takes FOREVER.)
                   sudo apt-get update -qq && sudo apt-get install -y -qq haveged
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ aws_vpc_subnet }}"
        assign_public_ip: true
        wait: true
        exact_count: 1
        count_tag:
          Name: eddings
        instance_tags:
          Name: eddings
          CreatedBy: "{{ whoami.stdout }}"
      register: ec2_eddings
    
    - name: EC2 - Provision 'jordan-u'
      ec2:
        key_name: "{{ aws_ec2_key_name }}"
        group:
          - default
          - ssh-all
        # The `t2.micro` instance type has 1 vCPUs, 1GB RAM, and 6 CPU credits/hour.
        instance_type: t2.micro
        image: "{{ ami_id_ubuntu_20_04 }}"
        user_data: |
                   #!/bin/sh
                   # Seed the new VM with entropy. It's probably not great quality entropy, but still better than nothing.
                   # (Seems to be particularly needed on the smaller EC2 instance types. Without this, Kerberos domain creation takes FOREVER.)
                   sudo apt-get update -qq && sudo apt-get install -y -qq haveged
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ aws_vpc_subnet }}"
        assign_public_ip: true
        wait: true
        exact_count: 1
        count_tag:
          Name: jordan-u
        instance_tags:
          Name: jordan-u
          CreatedBy: "{{ whoami.stdout }}"
      register: ec2_jordan_u

    - name: Calculate Test Zones and Domains
      set_fact:
        zone: tests.justdavis.com
        domain: "{{ domain_test_prefix }}justdavis.com"
        zone_doh: tests.davisonlinehome.name
        domain_doh: "{{ domain_test_prefix }}davisonlinehome.name"
        zone_mrc: tests.madrivercode.com
        domain_mrc: "{{ domain_test_prefix }}madrivercode.com"
        zone_mrd: tests.madriverdevelopment.com
        domain_mrd: "{{ domain_test_prefix }}madriverdevelopment.com"

    # Most of the Ansible configs will use the server being stood up as the 
    # primary DNS server during tests. However, there are some services (e.g. 
    # Let's Encrypt) that require records to be externally resolvable during 
    # the tests. Since Route 53 can't (easily) be used as a secondary DNS 
    # server, we instead use a split-view DNS, where Route 53 only contains 
    # those records that must be externally resolvable during tests.
    - name: 'Route 53: Create Externally-Used Test Records'
      route53:
        command: create
        overwrite: true
        wait: true
        ttl: 30
        zone: "{{ item.zone }}"
        record: "{{ item.record }}"
        type: "{{ item.type }}"
        value: "{{ item.value }}"
      async: 600
      poll: 0
      with_items:
        - { zone: "{{ zone }}", record: "{{ domain }}", type: 'A', value: "{{ ec2_eddings.instances[0].public_ip }}" }
        - { zone: "{{ zone }}", record: "www.{{ domain }}", type: 'A', value: "{{ ec2_eddings.instances[0].public_ip }}" }
        - { zone: "{{ zone }}", record: "mail.{{ domain }}", type: 'A', value: "{{ ec2_eddings.instances[0].public_ip }}" }
        - { zone: "{{ zone }}", record: "eddings.{{ domain }}", type: 'A', value: "{{ ec2_eddings.instances[0].public_ip }}" }
        - { zone: "{{ zone }}", record: "eddings.karlanderica.{{ domain }}", type: 'A', value: "{{ ec2_eddings.instances[0].private_ip }}" }
        - { zone: "{{ zone }}", record: "_kerberos.{{ domain }}", type: 'TXT', value: '"{{ domain | upper }}"' }
        - { zone: "{{ zone }}", record: "_kerberos._udp.{{ domain }}", type: 'SRV', value: "0 0 88 eddings.{{ domain }}." }
        - { zone: "{{ zone }}", record: "_kerberos-master._udp.{{ domain }}", type: 'SRV', value: "0 0 88 eddings.{{ domain }}." }
        - { zone: "{{ zone }}", record: "_kerberos-adm._tcp.{{ domain }}", type: 'SRV', value: "0 0 749 eddings.{{ domain }}." }
        - { zone: "{{ zone }}", record: "_kpasswd._udp.{{ domain }}", type: 'SRV', value: "0 0 464 eddings.{{ domain }}." }
        - { zone: "{{ zone_doh }}", record: "{{ domain_doh }}", type: 'A', value: "{{ ec2_eddings.instances[0].public_ip }}" }
        - { zone: "{{ zone_doh }}", record: "www.{{ domain_doh }}", type: 'A', value: "{{ ec2_eddings.instances[0].public_ip }}" }
        - { zone: "{{ zone_mrc }}", record: "{{ domain_mrc }}", type: 'A', value: "{{ ec2_eddings.instances[0].public_ip }}" }
        - { zone: "{{ zone_mrc }}", record: "www.{{ domain_mrc }}", type: 'A', value: "{{ ec2_eddings.instances[0].public_ip }}" }
        - { zone: "{{ zone_mrd }}", record: "{{ domain_mrd }}", type: 'A', value: "{{ ec2_eddings.instances[0].public_ip }}" }
        - { zone: "{{ zone_mrd }}", record: "www.{{ domain_mrd }}", type: 'A', value: "{{ ec2_eddings.instances[0].public_ip }}" }
      register: route53_records

    - name: Wait for Route53 Records
      async_status:
        jid: "{{ item.ansible_job_id }}"
      with_items: "{{ route53_records.results }}"
      register: route53_records_status
      until: route53_records_status.finished
      delay: 10
      retries: 60
 
    - name: EC2 - Wait for SSH
      wait_for: host={{ item.public_dns_name }} search_regex=OpenSSH port=22 state=started
      with_items: "{{ ec2_eddings.instances + ec2_jordan_u.instances }}"

    - name: Write Test Inventory
      template:
        src: hosts-test
        dest: ./hosts-test

