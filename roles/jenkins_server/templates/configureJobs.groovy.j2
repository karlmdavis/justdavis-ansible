// These are the basic imports that Jenkins interactive script console
// automatically includes.
import jenkins.*;
import jenkins.model.*;
import hudson.*;
import hudson.model.*;


//
// Define the Helper Functions for Managing Projects
//

//
// Check/Update the Project
//
def createOrUpdateProject = { projectName ->
  // Hardcode these values for all the projects.
  projectParent = Jenkins.instance
  gitHubOwner = 'karlmdavis'
  buildBranchesWithoutPullRequests = true
  buildBranchesWithPullRequests = true
  credentialsId = 'github-token-username-password'

  boolean updated = false
  project = projectParent.getItem(projectName)

  if (project == null) {
    println "Project doesn't exist yet: '${projectName}'."
    project = new org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject(Jenkins.instance, projectName)
    projectParent.add(project, projectName)
    updated = true
  }

  source = project.getSourcesList().find {
    it instanceof jenkins.branch.BranchSource &&
    it.source instanceof org.jenkinsci.plugins.github_branch_source.GitHubSCMSource &&
    it.source.repoOwner == gitHubOwner &&
    it.source.repository == projectName
  }

  if (source == null) {
    println "Matching source config not found for project: '${projectName}'."
    source = new jenkins.branch.BranchSource(new org.jenkinsci.plugins.github_branch_source.GitHubSCMSource(gitHubOwner, projectName))
    project.getSourcesList().add(source)
    updated = true
  }

  if (source.source.credentialsId != credentialsId) {
    println "Source config did not have correct credentials on project: '${projectName}'."
    source.source.credentialsId = credentialsId
    updated = true
  }

  branchDiscoveryTrait = source.source.traits.find { it instanceof org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait }
  if (branchDiscoveryTrait == null) {
    println "Source config did not have branch discovery trait on project: '${projectName}'."
    branchDiscoveryTrait = new org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait(buildBranchesWithoutPullRequests, buildBranchesWithPullRequests)
    source.source.traits.add(branchDiscoveryTrait)
    updated = true
  }

  for (int scmTraitIndex = 0; scmTraitIndex < source.source.traits.size(); scmTraitIndex++) {
    scmTrait = source.source.traits.get(scmTraitIndex)
    if (
        scmTrait instanceof org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait &&
        scmTrait.isBuildBranch() != buildBranchesWithoutPullRequests &&
        scmTrait.isBuildBranchesWithPR() != buildBranchesWithPullRequests
    ) {
      println "Source config did not have correct branch discovery trait on project: '${projectName}'."
      source.source.traits.remove(scmTraitIndex)
      branchDiscoveryTrait = new org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait(
          buildBranchesWithoutPullRequests,
          buildBranchesWithPullRequests
      )
      source.source.traits.add(branchDiscoveryTrait)
      updated = true
    }
  }

  if (updated) {
    project.save()
    println "Changed project: '${projectName}'."
  }
}

//
// Create/Update File Credentials
//
def createOrUpdateFileCredentials = { newSecret ->
  domain = com.cloudbees.plugins.credentials.domains.Domain.global()
  credsStore = Jenkins.instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

  secrets = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
    org.jenkinsci.plugins.plaincredentials.FileCredentials.class,
    Jenkins.instance
  )

  id = newSecret.id
  matchingSecret = secrets.find { secret -> secret.id == id }
  if (matchingSecret) {
    println "Secret found: ${matchingSecret.id}"

    if (newSecret.scope != matchingSecret.scope ||
        newSecret.description != matchingSecret.description ||
        newSecret.fileName != matchingSecret.fileName ||
        newSecret.secretBytes != matchingSecret.secretBytes) {
      updateResult = credsStore.updateCredentials(domain, matchingSecret, newSecret)
      if (updateResult) {
        println "Changed: secret updated: ${id}"
      } else {
        println "Secret failed to update: ${id}"
      }
    }
  } else {
    println "Secret not found: ${id}"
    credsStore.addCredentials(domain, newSecret)
    println "Changed: secret created: ${id}"
  }
}

//
// Create/Update SSH Credentials
//
def arePrivateKeySourcesEqual = { privateKeySource1, privateKeySource2 ->
  if (privateKeySource1 == null || privateKeySource2 == null) throw new IllegalArgumentException("Null not allowed.");
  if (!(privateKeySource1 instanceof com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey.DirectEntryPrivateKeySource)) throw new IllegalArgumentException("Unsupported type: " + privateKeySource1.getClass());
  if (privateKeySource1.getClass() != privateKeySource2.getClass()) return false;
  if (privateKeySource1.privateKey != privateKeySource2.privateKey) return false;

  return true;
}

def createOrUpdateSshPrivateKeyCredentials = { newSecret ->
  domain = com.cloudbees.plugins.credentials.domains.Domain.global()
  credsStore = Jenkins.instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

  secrets = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
    com.cloudbees.jenkins.plugins.sshcredentials.SSHUserPrivateKey.class,
    Jenkins.instance
  )

  id = newSecret.id
  matchingSecret = secrets.find { secret -> secret.id == id }
  if (matchingSecret) {
    println "Secret found: ${matchingSecret.id}"

    if (newSecret.scope != matchingSecret.scope ||
        newSecret.description != matchingSecret.description ||
        newSecret.username != matchingSecret.username ||
        !arePrivateKeySourcesEqual(newSecret.privateKeySource, matchingSecret.privateKeySource) ||
        newSecret.passphrase != matchingSecret.passphrase) {
      updateResult = credsStore.updateCredentials(domain, matchingSecret, newSecret)
      if (updateResult) {
        println "Changed: secret updated: ${id}"
      } else {
        println "Secret failed to update: ${id}"
      }
    }
  } else {
    println "Secret not found: ${id}"
    credsStore.addCredentials(domain, newSecret)
    println "Changed: secret created: ${id}"
  }
}

createOrUpdateFileCredentials(
  new org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl(
    com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
    'rps-tourney-ansible-vault-password',
    'rps-tourney-ansible-vault-password',
    'vault.password',
    com.cloudbees.plugins.credentials.SecretBytes.fromString('{{ vault_jenkins_rps_tourney_ansible_vault_password | b64encode }}')
  )
)

createOrUpdateSshPrivateKeyCredentials(
  new com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey(
    com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
    'eddings-builds-ssh-private-key',
    'localuser',
    new com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(
      // Base 64 dance used here to get around the line breaks in this String.
      new String('{{ vault_eddings_builds_ssh_private_key | b64encode }}'.decodeBase64())
    ),
    null,
    'eddings-builds-ssh-private-key'
  )
)


//
// Create/Update All of the Projects
//

projectNames = [
  'jessentials',
  'rps-tourney'
]

for (projectName in projectNames) {
  createOrUpdateProject(projectName)
}
