//
// Configure Plugin - Config File Provider
//
// Configures the Config File Provider plugin.
//
// References:
// * https://github.com/jenkinsci/config-file-provider-plugin/blob/master/src/test/java/org/jenkinsci/plugins/configfiles/buildwrapper/ConfigFileBuildWrapperWorkflowTest.java


// These are the basic imports that Jenkin's interactive script console 
// automatically includes.
import jenkins.*;
import jenkins.model.*;
import hudson.*;
import hudson.model.*;

println("Configuring Config File Provider Plugin...")

def createOrUpdateUsernamePasswordCredentials = { id, description, username, password ->
  domain = com.cloudbees.plugins.credentials.domains.Domain.global()
  credsStore = Jenkins.instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

  secrets = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
    com.cloudbees.plugins.credentials.common.UsernamePasswordCredentials.class,
    Jenkins.instance
  )

  matchingSecret = secrets.find { secret -> secret.id == id }
  newSecret = new com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl(
    com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
    id,
    description,
    username,
    password
  )

  if (matchingSecret != null && !matchingSecret.equals(newSecret)) {
    println "Secret found: ${matchingSecret.id}"
    updateResult = credsStore.updateCredentials(domain, matchingSecret, newSecret)
    if (updateResult) {
      println "Changed secret: ${id}"
    } else {
      println "Secret failed to update: ${id}"
    }
  } else if (matchingSecret == null) {
    println "Secret not found: ${id}"
    credsStore.addCredentials(domain, newSecret)
    println "Changed by creating secret: ${id}"
  }
}

// Verify that Jenkins' credentials store has the required logins.
credentialsId = "nexus-madrivercode-jenkins"
createOrUpdateUsernamePasswordCredentials(
  credentialsId,
  "Login for the justdavis Nexus server, which is needed to interact with the madrivercode repos there.",
  'jenkins',
  '{{ vault_service_account_passwords.jenkins }}'
)

// Grab the provider for Maven settings.xml files.
settingsFileProvider = org.jenkinsci.lib.configprovider.ConfigProvider
    .getByIdOrNull(org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig.class.getName())

// Create a new, correct config file object, for use below.
settingsConfigId = settingsFileProvider.getProviderId() + ":justdavis-settings-xml"
settingsConfigName = "The settings.xml for justdavis.com projects"
settingsConfigComment = ""
// Get the settings.xml file's contents into a Java variable with causing any
// compile errors. (Note: If all you need is a "standard" settings.xml, you can
// use the value of `settingsFileProvider.newConfig().content`, instead.
settingsConfigContent = new String(Base64.getDecoder().decode("{{ lookup('template', 'templates/mavenSettings.xml.j2') | b64encode }}"), java.nio.charset.StandardCharsets.UTF_8)
settingsConfigReplaceAll = true
settingsConfigCredentials = [
  new org.jenkinsci.plugins.configfiles.maven.security.ServerCredentialMapping("justdavis.com-nexus-madrivercode-releases", credentialsId),
  new org.jenkinsci.plugins.configfiles.maven.security.ServerCredentialMapping("justdavis.com-nexus-madrivercode-snapshots", credentialsId)
]
settingsConfigNew = new org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig(
  settingsConfigId,
  settingsConfigName,
  settingsConfigComment,
  settingsConfigContent,
  settingsConfigReplaceAll,
  settingsConfigCredentials
)

// Check for an existing config file.
settingsConfig = settingsFileProvider.getConfigById(settingsConfigId)

// Create the config file if it's missing.
if (settingsConfig == null) {
  println("Did not find config file ${settingsConfigId}. Creating...")
  settingsFileProvider.save(settingsConfigNew)
  settingsConfig = settingsConfigNew
  println("Changed by creating config file: ${settingsConfigId}")
}

def areCredentialsEqual = { credentials1, credentials2 ->
  if (credentials1 == null && credentials2 != null)
    return false
  if (credentials2 == null && credentials1 != null)
    return false
  if (credentials1.size != credentials2.size)
    return false

  for (int i = 0; i < credentials1.size; i++) {
    credentialFrom1 = credentials1[i]
    credentialFrom2 = credentials2[i]

    if (credentialFrom1 == null && credentialFrom2 != null)
      return false
    if (credentialFrom2 == null && credentialFrom1 != null)
      return false
    if (credentialFrom1.serverId != credentialFrom2.serverId
        || credentialFrom1.credentialsId != credentialFrom2.credentialsId)
      return false
  }

  return true
}

// Update the config file if it's out of date.
if (settingsConfig.id != settingsConfigNew.id
    || settingsConfig.name != settingsConfigNew.name
    || settingsConfig.name != settingsConfigNew.name
    || settingsConfig.comment != settingsConfigNew.comment
    || settingsConfig.content != settingsConfigNew.content
    || settingsConfig.isReplaceAll != settingsConfigNew.isReplaceAll
    || !areCredentialsEqual(settingsConfig.serverCredentialMappings, settingsConfigNew.serverCredentialMappings)) {
  println("Found config file '${settingsConfigId}'. Replacing...")
  settingsFileProvider.remove(settingsConfigId)
  settingsFileProvider.save(settingsConfigNew)
  println("Changed: replaced config file '${settingsConfigId}'.")
}
