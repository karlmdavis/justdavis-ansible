---
##
# Notes:
# * SonarQube stores most of its configuration in the database, in the
#   `properties` table.
# * This role doesn't set any `properties` table entries.
# * SonarQube's default admin login is `admin` / `admin`. This must be manually
#   changed after install (it's stored in the database, hashed).
# * SonarQube supports LDAP groups but groups with the same name as those in
#   LDAP have to be manually created in its admin interface, first.
#
# Required Manual Installation Steps:
# 1. Login to SonarQube as admin/admin and change the default admin password
#    to something secure.
# 2. Create a local `jenkins` user in SonarQube, generate an authentication
#    token for it, and save that token's value in the Ansible vault as
#    `vault_sonar_builds_auth_token`.
##


- name: Install Prerequisites
  apt:
    name: "{{ item }}"
  become: true
  with_items:
    # SonarQube will use a PostgreSQL DB to store most of its data.
    # The psycopg2 lib is needed by Ansible's postgresql_db module.
    - [postgresql, postgresql-client, python3-psycopg2]

- import_role:
    name: geerlingguy.java
  vars:
    java_packages: ['openjdk-8-jdk']
  become: true

#- name: Add the SonarQube APT Repository
#  apt_repository:
#    repo: 'deb [trusted=yes] http://downloads.sourceforge.net/project/sonar-pkg/deb binary/'
#  become: true

- name: Install SonarQube
  apt:
    name: sonar
  become: true

- name: Create Database User
  postgresql_user:
    name: "{{ vault_sonar_db_username }}"
    password: "{{ vault_sonar_db_password }}"
  become: true
  become_user: postgres

- name: Create Database
  postgresql_db:
    name: sonar
    owner: "{{ vault_sonar_db_username }}"
  become: true
  become_user: postgres

- name: Install SonarQube Plugins
  get_url:
    url: "{{ item.url }}"
    dest: "/opt/sonar/extensions/plugins/{{ item.name }}"
    owner: sonar
    group: nogroup
    mode: u=rw,g=r,o=r
  become: true
  notify:
    - "Restart 'sonar'"
  with_items:
    - url: 'https://sonarsource.bintray.com/Distribution/sonar-ldap-plugin/sonar-ldap-plugin-2.2.0.608.jar'
      name: 'sonar-ldap-plugin-2.2.0.608.jar'

- name: Configure SonarQube
  lineinfile:
    path: /opt/sonar/conf/sonar.properties
    insertafter: "{{ item.insertafter | default(omit) }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  become: true
  notify:
    - "Restart 'sonar'"
  with_items:
    - insertafter: '^#----- PostgreSQL.*$'
      regexp: '^sonar\.jdbc\.url=.*$'
      line: 'sonar.jdbc.url=jdbc:postgresql://localhost/sonar'
    - insertafter: '^#sonar.jdbc.password=$'
      regexp: '^sonar.jdbc.username=.*$'
      line: "sonar.jdbc.username={{ vault_sonar_db_username }}"
    - insertafter: '^#sonar.jdbc.password=$'
      regexp: '^sonar.jdbc.password=.*$'
      line: "sonar.jdbc.password={{ vault_sonar_db_password }}"
    - insertafter: '^#sonar.web.context=$'
      regexp: '^sonar.web.context=.*$'
      line: "sonar.web.context={{ sonar_context_path }}"
    - regexp: '^sonar.security.realm=.*$'
      line: 'sonar.security.realm=LDAP'
    - regexp: '^ldap.url=.*$'
      line: "ldap.url=ldaps://{{ domain }}"
    - regexp: '^ldap.user.baseDn=.*$'
      line: 'ldap.user.baseDn=dc=justdavis,dc=com'
    - regexp: '^ldap.user.request=.*$'
      line: 'ldap.user.request=(| (& (objectClass=inetOrgPerson) (uid={0}) ) (& (objectClass=simpleSecurityObject) (cn={0}) ) )'
    - regexp: '^ldap.group.baseDn=.*$'
      line: 'ldap.group.baseDn=dc=justdavis,dc=com'
    - regexp: '^ldap.group.request=.*$'
      line: 'ldap.group.request=(| (& (objectClass=posixGroup) (memberUid={uid}) ) (& (objectClass=groupOfNames) (member={dn}) ) )'
